//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;

using NSAgent;
using NSWorldState;
using NSAStarMachine;
using NSAStarPlanner;
using NSGoalAbstract;
using NSActionAbstract;
using NSPlan;

namespace NSAIPlanner
{
	public class AIPlanner
	{

        protected Agent m_Agent;
        protected AStarMachine m_AStarMachine = new AStarMachine();
        protected AStarMapPlanner m_AStarMapPlanner = new AStarMapPlanner();
        protected AStarStoragePlanner m_AStarStoragePlanner = new AStarStoragePlanner();
        protected AStarGoalPlanner m_AStarGoalPlanner = new AStarGoalPlanner();

        public AIPlanner(Agent agent)
        {
            m_Agent = agent;
            InitAIPlanner();
        }

        //TODO - ref or out?
        public void InitAIPlanner()
        {
            m_AStarStoragePlanner.InitAStarStoragePlanner(ref m_AStarMachine);

            //  public void InitAStarMachine(Agent agent, ref AStarStorageAbstract aStarStorage, ref AStarGoalAbstract aStarGoal, ref AStarMapAbstract aStarMap) 
            //m_AStarMachine.InitAStarMachine(m_Agent, ref (AStarStorageAbstract)m_AStarStoragePlanner, ref (AStarGoalAbstract)m_AStarGoalPlanner, ref (AStarMapAbstract)m_AStarMapPlanner);

            m_AStarMachine.InitAStarMachine(m_Agent, m_AStarStoragePlanner, m_AStarGoalPlanner, m_AStarMapPlanner);

            m_AStarMapPlanner.InitAStarMapPlanner(m_Agent);

            m_AStarMapPlanner.BuildEffectActionsTable();
        }

        //returns true if successful in building a plan that will satisfy the supplied Goal
	    //public bool	BuildPlan(Agent agent, GoalAbstract goal);

        public bool BuildPlan(GoalAbstract goal)
        {
            // Initialise the planner.
	        m_AStarGoalPlanner.InitAStarGoalPlanner( m_Agent, ref m_AStarMapPlanner, goal );

	        // Set the start of the search to -1, indicating that
	        // the search starts from the Goal rather than from an Action.
	        //(regressive search is more effecient than a brute force forward search)
	        m_AStarMachine.SetAStarSource( (ENUM_ASTAR_NODE_ID)(-1) );

	        // Run the AStar machine to search for a valid plan to satisfy the Goal.
            //Console.WriteLine("Planner Starting AStar for Goal: {0}", GoalAbstract.s_GoalTypes[(int)goal.GetGoalType()]);

	        m_AStarMachine.RunAStar();

	        // If after the search the current node is NULL, then no valid plan was found.
	        AStarNodePlanner node = (AStarNodePlanner)( m_AStarMachine.GetAStarNodeCurrent() );
	
	        if( node == null )
	        {
                Console.WriteLine("No Plan Found");
		        return false;
	        }

	        // Create a new plan.
	        Plan plan = new Plan(m_Agent);

	        // at this point should have a full formed plan.
            Console.WriteLine("Plan Found");

	        // Iterate over nodes in the planner's search path, and add them to the plan.
	        ENUM_ACTION_TYPE eActionType;
	        PlanStep planStep;
	
	        while( node != null )
	        {
		        //convert between map nodes and ai actions
		        eActionType = m_AStarMapPlanner.ConvertID_AStarNode2Action( node.eAStarNodeID );
		
                // If the Action is Invalid, this is the final node.
                if (eActionType == ENUM_ACTION_TYPE.kAct_InvalidType)
		        {
			        break; 
		        }

		        // Create a new plan step.
		        planStep = new PlanStep();

		        // Set the Action for this plan step.
                //Console.WriteLine("PlanStep Action: {0}", ActionAbstract.s_aszActionTypes[(int)eActionType] );

		        planStep.eActionType = eActionType;

		        // Advance the plan to the next node.
		        node = (AStarNodePlanner)( node.aStarParent );

		        // Copy the world state from the node.
		        // This is the world state that should be achieved by taking this step of the plan.
		        planStep.wsWorldState.CopyWorldState(ref node.wsWorldStateGoal);

		        // Add the new step to the plan.
		        plan.m_listPlanSteps.Add(planStep);
	        }

	        // Set the new plan for the Goal.
	        goal.SetPlan(plan);

           // Console.WriteLine("Plan Successfully Built for Goal: {0}", GoalAbstract.s_GoalTypes[(int)goal.GetGoalType()]);

	        // Successfully built a plan.
	        return true;
        }

        //Merge properties from the goal world state into the current world state,if not already present.
        //Evaluate true world state of properties that were not orginally in the current world state.
        public void MergeWorldStates(Agent agent, ref WorldState wsCurrentState, ref WorldState wsGoalState)
        {
            Console.WriteLine("Merging WorldStates");

            //error here when wsCurrentState is null.

            WorldStateProp prop = new WorldStateProp();

	        BitArray flagsCurrent = wsCurrentState.GetWSPropSetFlags();
            BitArray flagsGoal = wsGoalState.GetWSPropSetFlags();

	        // NOTE: The current and goal world states only contain properties relevant to the Goal
	        // that the planner is trying to satisfy, and properties added by preconditions of Actions.
	        // The AI Agent's view of the true world state may contain many more properties.

	        // Iterate over properties in goal world state.
            for (int iProp = 0; iProp < (int)ENUM_WORLDSTATE_PROP_KEY.kWSKey_Count; ++iProp)
	        {
		        //Continue if property already exists in current world state.
                //TODO: revist this.
		        if((!flagsGoal.Get(iProp)) || (flagsCurrent.Get(iProp)))
		        {
			        continue;
		        }

                prop = wsGoalState.GetWSProp((ENUM_WORLDSTATE_PROP_KEY)iProp);	
		
		        if(prop == null)
		        {
			        continue;
		        }

		        // Add property to current world state.
                WorldStateProp wsProp = new WorldStateProp();
		        wsProp.eWSKey = prop.eWSKey;

                prop.eWSType = ENUM_WORLDSTATE_PROP_TYPE.kWSType_Unset;

		        // Get the true current value of the world state property,
		        // as determined by the AI's actual world state.
                EvaluateWorldStateProp(agent, ref wsProp);

		        wsCurrentState.SetWSProp(ref wsProp);
	        }
        }

        protected void EvaluateWorldStateProp(Agent agent, ref WorldStateProp prop)
        {
            WorldState worldState = agent.GetWorldState();

	        if( worldState == null ) {
		        return;
	        }

            //wsProp is NULL if prop.eWSKey not in agents worldstate
            WorldStateProp wsProp = worldState.GetWSProp(prop.eWSKey);

	        if(wsProp == null) {
                Console.WriteLine("AIPlanner::EvaluateWorldStateProp: Unhandled / NULL World State");
		        return;
	        }
	
	        prop = wsProp;
        }
	}
}

