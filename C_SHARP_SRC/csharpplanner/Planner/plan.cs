//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using NSAgent;
using NSActionAbstract;
using NSWorldState;

namespace NSPlan
{
    // a plan consits of a number of steps; 
    // each step contains an Action and a representation of the world state it expects to achieve
	public class PlanStep
	{

        public ENUM_ACTION_TYPE eActionType;
        public WorldState wsWorldState;

		public PlanStep()
		{
            eActionType = ENUM_ACTION_TYPE.kAct_InvalidType;
            wsWorldState.ResetWS();
		}
	}

    //
    public class Plan
    {
        //TODO: replace this.
        //declares all member functions of AIPlanner as friends,
	    //a friend function has the right to access all (inc private) members,
	    //while can enhance performance, personally i dislike using them,
	    //but im sticking as close to fear as possible until its running,
	    //so will just have to put up with it for now.
	    //friend class AIPlanner;

        public Agent             m_Agent;
        public List<PlanStep> m_listPlanSteps;
        public uint m_iPlanStep;
        public double m_fPlanActivationTime;

        public Plan(Agent agent)
        {
            m_Agent = agent;
            m_iPlanStep = 0;
            m_fPlanActivationTime = 0.0f;
        }

		~Plan()
        {
            DeactivatePlan();
            m_listPlanSteps.Clear();
        }

        //
        public void ActivatePlan(Agent agent)
        {
            Console.WriteLine("Activate Plan..........................");

	        if(agent == null)
	        {
		        return;
	        }

	        m_Agent = agent;

            m_fPlanActivationTime = ( DateTime.UtcNow.Millisecond / 1000); //TODO replace timegettime()

	        PlanStep planStep = m_listPlanSteps[0] ;

	        if(planStep != null)
	        {
		        //
		        ActionAbstract action = m_Agent.GetActionStorage().GetAction(planStep.eActionType);

		        if(action != null)
		        {
			        //check if actions preconditions are met- bail out if not
			        if( !action.ValidateContextPreconditions(m_Agent, ref planStep.wsWorldState, true ) )
			        {
                       // Console.WriteLine("Failed to activate plan due to first action's failed context preconditions: {0} Cost: {1}", ActionAbstract.s_aszActionTypes[(int)action.GetActionType()], action.GetActionCost() );
				        m_Agent.GetBlackBoard().SetBBInvalidatePlan(true);
				        return;
			        }

                   // Console.WriteLine("Activating Action :: {0} Cost: {1}", ActionAbstract.s_aszActionTypes[(int)action.GetActionType()], action.GetActionCost());

			        action.ActivateAction(m_Agent, ref planStep.wsWorldState );

			        //if action was immediately complete then advance to another action
			        if(action.IsActionComplete(m_Agent))
			        {
                        Console.WriteLine("Action Complete");
				        AdvancePlan();
			        }
		        }
	        }

        }

        //
        public void DeactivatePlan()
        {
            Console.WriteLine("Deactivate Plan..........................");

	        // Deactivate the current action
	        ActionAbstract action = GetCurrentPlanStepAction();

	        if( action != null )
	        {
		        action.DeactivateAction(m_Agent);
	        }
        }

        //
        public bool IsPlanStepComplete() 
        {
            if (m_iPlanStep >= m_listPlanSteps.Count)
            {
                return false;
            }

            PlanStep planStep = m_listPlanSteps[(int)m_iPlanStep];

            if (planStep != null)
            {
                ActionAbstract action = m_Agent.GetActionStorage().GetAction(planStep.eActionType);

                if (action != null)
                {
                    return action.IsActionComplete(m_Agent);
                }
            }

            return false;
        }

        //
        public bool IsPlanStepInterruptible()
        {
            if (m_iPlanStep >= m_listPlanSteps.Count)
            {
                return true;
            }

            PlanStep planStep = m_listPlanSteps[(int)m_iPlanStep];

            if (planStep != null)
            {
                ActionAbstract action = m_Agent.GetActionStorage().GetAction(planStep.eActionType);

                if (action != null)
                {
                    return action.IsActionInterruptible(m_Agent);
                }
            }

            return true;
        }

        public bool AdvancePlan()
        { 
            ActionAbstract action;
	        PlanStep planStep;

	        // Continue advancing the plan until we find
	        // one that can activate and is not immediately
	        // complete.

	        while(true)
	        {
		        // Apply Effects to context.
		        // By default, Actions do not have any effect on the real world.
		        // They only affect the planners representation of the world.
		        // This gives more control of where WorldState variables are set or allows them to never be set.
		        // (e.g. AtTargetPos is never really true in the real world, because targets more continuously.)

                Console.WriteLine("Advance Plan..........................");

		        planStep = m_listPlanSteps[(int)m_iPlanStep];

		        if(planStep != null)
		        {
			        action = m_Agent.GetActionStorage().GetAction(planStep.eActionType);
			
			        if(action != null)
			        {
				        action.ApplyContextEffect(m_Agent, m_Agent.GetWorldState() , ref (planStep.wsWorldState));
				        action.DeactivateAction(m_Agent);
			        }
		        }

		        // Advance the step.
		        // Bail if no more steps.
		        ++m_iPlanStep;
		
		        if( m_iPlanStep >= m_listPlanSteps.Count )
		        {
			        return false;
		        }

		        planStep = m_listPlanSteps[(int)m_iPlanStep];

		        if(planStep != null)
		        {
			        action = m_Agent.GetActionStorage().GetAction(planStep.eActionType);

			        if(action != null)
			        {
				        // Action's preconditions are not met. Bail.
				        if( !action.ValidateContextPreconditions( m_Agent, ref planStep.wsWorldState, false ) )
				        {
					        return false;
				        }

				        // Bail if action is not immediately complete.

				        //need a logging/screen print system
                        //Console.WriteLine("Activating Action: {0}, Cost: {1}", ActionAbstract.s_aszActionTypes[(int)action.GetActionType()], action.GetActionCost());

				        action.ActivateAction(m_Agent, ref planStep.wsWorldState);
				
				        if( !action.IsActionComplete(m_Agent) )
				        {
					        return true;
				        }

				        // Deactivate action if it was immediately complete.
				        action.DeactivateAction(m_Agent);
			        }
		        }
	        }

	        // Uh oh: Something is wrong.
	       // return false;        
        }

        //
        public bool IsPlanValid() 
        {
            if (m_iPlanStep >= m_listPlanSteps.Count)
            {
                return false;
            }

            //
            PlanStep planStep = m_listPlanSteps[(int)m_iPlanStep];

            if (planStep != null)
            {
                ActionAbstract action = m_Agent.GetActionStorage().GetAction(planStep.eActionType);

                if (action != null)
                {
                    //
                    return action.ValidateAction(m_Agent);
                }
            }

            return false;
        }

        //
		public double GetPlanActivationTime() { return m_fPlanActivationTime; }


        //
       public ActionAbstract GetCurrentPlanStepAction() 
        {
            if( m_iPlanStep >= m_listPlanSteps.Count )
	        {
		        return null;
	        }

	        PlanStep planStep = m_listPlanSteps[(int)m_iPlanStep];
	
	        if(planStep != null)
	        {
                //Console.WriteLine("Current PlanStep Action: {0}", ActionAbstract.s_aszActionTypes[(int)planStep.eActionType]);

		        return m_Agent.GetActionStorage().GetAction(planStep.eActionType);
	        }

	        return null;
        }
    }

}

