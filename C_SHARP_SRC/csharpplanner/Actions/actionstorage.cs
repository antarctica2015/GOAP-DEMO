//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;

using NSActionAbstract;
using NSActionIdle;
using NSActionReload;

namespace NSActionStorage
{
	public class ActionStorage
	{
	       public ActionStorage()
            {
                    m_ActionList  = new List<ActionAbstract>();
                	m_ActionList.Clear();

	                Init();
            }

	       ~ActionStorage()
           {
                Term();
	            m_ActionList.Clear();
           }

	       public void Init()
           {
                ActionAbstract action;

	            //create and initialise all the actions
	            for(uint iAction =0 ; iAction < (int)ENUM_ACTION_TYPE.kAct_Count; ++iAction)
	            {
		            //
		            action = CreateNewAction((ENUM_ACTION_TYPE)iAction); 

                   // Console.WriteLine("Created Action: {0}" , NSActionAbstract.ActionAbstract.s_aszActionTypes[(int)(ENUM_ACTION_TYPE)iAction] );

			            if(action != null)
			            {	
				            action.InitAction();
				            m_ActionList.Add(action);	
			            }
		
	            }
           }

	       public void	Term()
           {
              
               foreach (ActionAbstract action in m_ActionList)
	            {
		            if(action != null)
		            {
                       // Console.WriteLine("Destroying Action: {0}", NSActionAbstract.ActionAbstract.s_aszActionTypes[(int)action.GetActionType()]);
			           // action = null
		            }

	            }

                // This this is all thats really required here?
               m_ActionList.Clear();
           }

	       //Querys
	       public ActionAbstract GetAction(ENUM_ACTION_TYPE eActionType)
           {
                if( (eActionType > ENUM_ACTION_TYPE.kAct_InvalidType) && ( eActionType < ENUM_ACTION_TYPE.kAct_Count ) )
	            {
		            return m_ActionList[(int)eActionType];
	            }

	            return null;
           }

	       public int GetNumActions() { return m_ActionList.Count ; }

           // Returns true if the action is in the specified set, else returns false.
	       public bool IsActionInActionList(ENUM_ACTION_TYPE eActionType )
           {
               //check if action enum is invalid.
	            if( (eActionType <= ENUM_ACTION_TYPE.kAct_InvalidType) || ( eActionType >= ENUM_ACTION_TYPE.kAct_Count ) )
	            {
		            return false;
	            }

	            for(int iAction = 0 ; iAction < (int)ENUM_ACTION_TYPE.kAct_Count ; ++iAction)
	            {
		            if( m_ActionList[iAction].GetActionType() == eActionType )
		            {
			            return true;
		            }
	            }

                Console.WriteLine("Action not in list!: {0}", eActionType);
	            return false;
           }

		   protected ActionAbstract CreateNewAction(ENUM_ACTION_TYPE eActionClass)
           {
                switch(eActionClass)
	            {
		            case ENUM_ACTION_TYPE.kAct_Idle: { return new ActionIdle(); }     //0
		            case ENUM_ACTION_TYPE.kAct_Reload: { return new ActionReload(); } //1

		            default: 
                        Console.WriteLine("ActionStorage::CreateAction: Unrecognised Action Type!");
                        break;
	            }

	            return null;
           }

	       protected List<ActionAbstract> m_ActionList;
	}
}