//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;

using NSGoalAbstract;
using NSAgent;
using NSWorldState;
using NSUtils;

namespace NSGoalIdle
{
	public class GoalIdle : GoalAbstract
	{

		public GoalIdle()
		{
		}

        //needs this?
       // public override ENUM_GOAL_TYPE GetGoalClassType() { return ENUM_GOAL_TYPE.kGoal_Idle; }

        public override void InitGoal(Agent agent, ENUM_GOAL_TYPE eGoalType)
		{
            //Console.WriteLine("Init Goal : {0}", GoalAbstract.s_GoalTypes[(int)eGoalType]);

			m_Agent = agent;
			m_eGoalType = eGoalType;
            m_eAIContext = ENUM_AI_CONTEXT.kContext_Invalid;
			m_fRecalcRate = 0.0f;
			m_fActivateChance = 1.0f;
			m_fInterruptPriority = 0.0f;
			m_fFrequency = 0.0f;
			m_bCanReactivateDuringTransitions = false;
			m_bReEvalOnSatisfied = false;
		
		}

        public override void CalculateGoalRelevance()
		{
			// The idle goal has a constant, very low relevance.
			// It should always be active if nothing else is.
			m_fGoalRelevance = 0.1f;
		}

		//set the worldstate satisfaction preconditions - was WorldState&
		public override void	SetWSSatisfaction(ref WorldState worldState)
		{
            worldState.SetWSProp(ENUM_WORLDSTATE_PROP_KEY.kWSKey_Idling, ENUM_WORLDSTATE_PROP_TYPE.kWSType_bool, true);
		}

		//returns true if the worldstate satsifies the goal
        public override bool IsWSSatisfied(WorldState pWorldState)
		{
			// The idle goal is never satisfied in real-time,
			// but the planner should always consider it satisfied.
			return false;
		}


	}
}

